{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","images/summerbcg.jpg","images/fallbcg.jpg","images/winterbcg.jpg","images/springbcg.jpg","app.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","qNum","totalQ","className","dangerouslySetInnerHTML","__html","answer","disabled","onClick","value","n","Date","getMonth","img","winter","spring","summer","fall","GlobalStyle","createGlobalStyle","Wrapper","styled","div","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","diff","setDifficulty","setQnum","seeScoreBtn","setSeeScoreBtn","seeScore","setSeeScore","backBtn","setBackBtn","startTrivia","newQuestions","name","onChange","event","target","Object","keys","dif","type","parseInt","undefined","e","currentTarget","correct","prev","answerObj","correctAnswer","length","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIAiBYA,E,+FAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAMZ,IAiBeC,EAjBS,uCAAG,WAAOC,EAAgBC,GAAvB,iBAAAC,EAAA,6DACnBC,EADmB,6CAC8BH,EAD9B,uBACmDC,EADnD,2BAGCG,MAAMD,GAHP,8BAGkBE,OAHlB,cAGnBC,EAHmB,yBAKlBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAEpBA,GAFmB,IAKtBC,SCjCyBC,EDiCH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBClCb,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDuBF,2CAAH,wDEmBTM,EA7BuB,SAAC,GAAD,IACpCR,EADoC,EACpCA,SACAC,EAFoC,EAEpCA,QACAQ,EAHoC,EAGpCA,SACAC,EAJoC,EAIpCA,WACAC,EALoC,EAKpCA,KACAC,EANoC,EAMpCA,OANoC,OAQpC,gCACE,oBAAGC,UAAU,SAAb,uBACaF,EADb,MACsBC,KAEtB,mBAAGE,wBAAyB,CAAEC,OAAQf,KACtC,8BACGC,EAAQF,KAAI,SAACiB,GAAD,OACX,8BACE,wBACEC,WAAUP,EACVQ,QAAST,EACTU,MAAOH,EAHT,SAKE,sBAAMF,wBAAyB,CAAEC,OAAQC,QANnCA,Y,gBC5BH,MAA0B,sCCA1B,MAA0B,oCCA1B,MAA0B,sCCA1B,MAA0B,sC,mlDCMzC,IACMI,GADI,IAAIC,MACFC,WACRC,EACFH,GAAK,EAAII,EAASJ,GAAK,EAAIK,EAASL,GAAK,EAAIM,EAASN,GAAK,GAAKO,EAAOH,EAE5DI,EAAcC,YAAH,IAOIN,GAgBfO,EAAUC,IAAOC,IAAV,KC0ILC,MA5Jf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAA0B,IAF/C,mBAENG,EAFM,KAEKC,EAFL,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIyBN,mBAAyB,IAJlD,mBAINO,EAJM,KAIOC,EAJP,OAKaR,mBAAS,GALtB,mBAKNS,EALM,KAKCC,EALD,OAMmBV,oBAAS,GAN5B,mBAMNW,EANM,KAMIC,EANJ,OAOiBZ,mBAAS,QAP1B,mBAONa,EAPM,KAOAC,EAPA,OAQWd,mBAAS,MARpB,mBAQNvB,EARM,KAQAsC,EARA,OASyBf,oBAAS,GATlC,mBASNgB,EATM,KASOC,EATP,OAUmBjB,oBAAS,GAV5B,mBAUNkB,EAVM,KAUIC,EAVJ,OAWiBnB,oBAAS,GAX1B,mBAWNoB,EAXM,KAWGC,GAXH,KAqBPC,GAAW,uCAAG,4BAAA/D,EAAA,6DAClB2C,GAAW,GACXU,GAAY,GAFM,SAISxD,EAAmBqB,EAAMoC,GAJlC,OAIZU,EAJY,OAMlBnB,EAAamB,GACbb,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAVO,4CAAH,qDA6DjB,OACE,qCACE,cAACR,EAAD,IACA,eAACE,EAAD,WACE,sCAECe,IAAaS,EACZ,iCACE,gDACA,wBACEzC,UAAU,aACV6C,KAAK,aACLC,SAjFM,SAACC,GACjBZ,EAAcY,EAAMC,OAAO1C,QA6EnB,SAKG2C,OAAOC,KAAK1E,GAAYU,KAAI,SAACiE,GAAD,OAC3B,wBAAQ7C,MAAO6C,EAAf,SACGA,GADsBA,QAK7B,kDACA,yBAAQnD,UAAU,OAAO6C,KAAK,OAAOC,SAtF7B,SAACC,GACjBX,EAAQW,EAAMC,OAAO1C,QAqFb,UACE,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,mBAEF,uBACE8C,KAAK,SACLpD,UAAU,QACVK,QAASsC,GACTrC,MAAM,aAGR,KAEHiC,GAAY,oBAAGvC,UAAU,QAAb,oBAA6B8B,KAEzCR,GAAW,uDAEVA,IAAYU,GACZ,cAAC,EAAD,CACElC,KAAM4B,EAAS,EACf3B,OAAQsD,SAASvD,GACjBX,SAAUqC,EAAUE,GAAQvC,SAC5BC,QAASoC,EAAUE,GAAQtC,QAC3BS,WAAY+B,EAAcA,EAAYF,QAAU4B,EAChD1D,SA9FU,SAAC2D,GACnB,IAAKvB,EAAU,CACb,IAAM7B,EAASoD,EAAEC,cAAclD,MACzBmD,EAAUjC,EAAUE,GAAQnC,iBAAmBY,EAC3C4B,EAAV0B,EAAmB,SAACC,GAAD,OAAUA,EAAO,GAAc,SAACA,GAAD,OAAUA,IAE5D,IAAMC,EAAY,CAChBxE,SAAUqC,EAAUE,GAAQvC,SAC5BgB,OAAQA,EACRsD,QAASA,EACTG,cAAepC,EAAUE,GAAQnC,gBAGnCsC,GAAe,SAAC6B,GAAD,4BAAcA,GAAd,CAAoBC,OAC9BrC,GAAWI,IAAW2B,SAASvD,GAAQ,GAC1CwC,GAAe,OAmFbN,GACDV,GACDM,EAAYiC,SAAWnC,EAAS,GAChCA,IAAW2B,SAASvD,GAAQ,EAIxB,KAHF,wBAAQE,UAAU,OAAOK,QAlFZ,WACnB,IAAMyD,EAAepC,EAAS,EAC1BoC,IAAiBT,SAASvD,GAC5BmC,GAAY,GAEZN,EAAUmC,IA6EN,2BAKDzB,IAAgBL,GACf,wBAAQhC,UAAU,WAAWK,QA/EhB,WACnB4B,GAAY,GACZO,GAAY,GACZE,IAAW,IA4EL,uBAIDD,GACC,wBAAQzC,UAAU,OAAOK,QA9EnB,WACZoB,EAAa,IACbE,EAAU,GACVE,EAAe,IACfE,EAAS,GACTE,GAAY,GACZE,EAAc,QACdC,EAAQ,MACRE,GAAe,GACfE,GAAY,GACZE,IAAW,IAoEL,yBCrJKqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.198933ba.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\n// const env = process.env;\n// console.log(process.env.REACT_APP_API_URL);\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\n// concatinate question object and original array \"answers\"\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  easy = \"easy\",\n  medium = \"medium\",\n  hard = \"hard\",\n}\n\nconst fetchQuizQuestions = async (amount: string, difficulty: string) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\n  const data = await (await fetch(endPoint)).json();\n\n  return data.results.map((question: Question) => ({\n    //   first return all exsisting values in the array\n    ...question,\n\n    // and here you are adding the acual value to the anwers array which is created in line 15\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n\nexport default fetchQuizQuestions;\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import React from \"react\";\n\nimport { AnswerObject } from \"../App\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  qNum: number;\n  totalQ: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  qNum,\n  totalQ,\n}) => (\n  <div>\n    <p className=\"number\">\n      Question: {qNum} / {totalQ}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <div key={answer}>\n          <button\n            disabled={userAnswer ? true : false}\n            onClick={callback}\n            value={answer}\n          >\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/summerbcg.36c9980d.jpg\";","export default __webpack_public_path__ + \"static/media/fallbcg.da290d65.jpg\";","export default __webpack_public_path__ + \"static/media/winterbcg.9e81f8c9.jpg\";","export default __webpack_public_path__ + \"static/media/springbcg.eabae0f9.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport summer from \"./images/summerbcg.jpg\";\nimport fall from \"./images/fallbcg.jpg\";\nimport winter from \"./images/winterbcg.jpg\";\nimport spring from \"./images/springbcg.jpg\";\n\nconst d = new Date();\nconst n = d.getMonth();\nlet img =\n  n <= 2 ? winter : n <= 5 ? spring : n <= 8 ? summer : n <= 10 ? fall : winter;\n\nexport const GlobalStyle = createGlobalStyle`\n\nhtml{\n    height: 100%;\n}\n\nbody{\n    background-image: url(${img});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n\n}\n\n* {\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif;\n}\n\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n    @media (min-width: 768px) {\n      font-size: 1.5rem;\n    }\n  }\n\n  @media (min-width: 768px) {\n    form {\n      font-size: 1.5rem;\n    }\n    select {\n      font-size: 1.5rem;\n    }\n    input {\n      font-size: 1.5rem;\n    }\n\n    p {\n      font-size: 1.5rem;\n    }\n\n    button {\n      font-size: 1.2rem;\n    }\n  }\n\n  .score {\n    color: black;\n    font-size: 2rem;\n    margin: 0;\n    @media (min-width: 768px) {\n      font-size: 3rem;\n    }\n  }\n\n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\",\n      sans-serif, Impact, Haettenschweiler, \"Arial Narrow Bold\", sans-serif;\n    /* background-image: linear-gradient(180deg, #fff, #87f1ff); */\n    background-size: 100%;\n    background-clip: text;\n    --webkit-background-clip: text-align;\n    --webkit--webkit-text-fill-color: transparent;\n    --moz-background-clip: text;\n    --moz-background-clip: transparent;\n\n    filter: drop-shadow(2px, 2px, #0085a3);\n    text-align: center;\n    margin: 20px;\n\n    @media (min-width: 768px) {\n      font-size: 3rem;\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport fetchQuizQuestions from \"./API\";\n\nimport { QuestionState, Difficulty } from \"./API\";\n\nimport QuestionCard from \"./components/QuestionCard\";\n\nimport { GlobalStyle, Wrapper } from \"./app.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [diff, setDifficulty] = useState(\"easy\");\n  const [qNum, setQnum] = useState(\"10\");\n  const [seeScoreBtn, setSeeScoreBtn] = useState(false);\n  const [seeScore, setSeeScore] = useState(false);\n  const [backBtn, setBackBtn] = useState(false);\n\n  const selectDif = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setDifficulty(event.target.value);\n  };\n\n  const selectNum = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setQnum(event.target.value);\n  };\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(qNum, diff);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      correct ? setScore((prev) => prev + 1) : setScore((prev) => prev);\n\n      const answerObj = {\n        question: questions[number].question,\n        answer: answer,\n        correct: correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObj]);\n      if (!loading && number === parseInt(qNum) - 1) {\n        setSeeScoreBtn(true);\n      }\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === parseInt(qNum)) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  const seeScoreFunc = () => {\n    setGameOver(true);\n    setSeeScore(true);\n    setBackBtn(true);\n  };\n\n  const reset = () => {\n    setQuestions([]);\n    setNumber(0);\n    setUserAnswers([]);\n    setScore(0);\n    setGameOver(true);\n    setDifficulty(\"easy\");\n    setQnum(\"10\");\n    setSeeScoreBtn(false);\n    setSeeScore(false);\n    setBackBtn(false);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Quiz</h1>\n\n        {gameOver && !backBtn ? (\n          <form>\n            <label>Difficulty:</label>\n            <select\n              className=\"difficulty\"\n              name=\"difficulty\"\n              onChange={selectDif}\n            >\n              {Object.keys(Difficulty).map((dif) => (\n                <option value={dif} key={dif}>\n                  {dif}\n                </option>\n              ))}\n            </select>\n            <label>Number of Qs:</label>\n            <select className=\"numQ\" name=\"numQ\" onChange={selectNum}>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n              <option value=\"20\">20</option>\n            </select>\n            <input\n              type=\"submit\"\n              className=\"start\"\n              onClick={startTrivia}\n              value=\"Start\"\n            />\n          </form>\n        ) : null}\n\n        {seeScore && <p className=\"score\">Score: {score}</p>}\n\n        {loading && <p>Loading Questions ...</p>}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            qNum={number + 1}\n            totalQ={parseInt(qNum)}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== parseInt(qNum) - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n\n        {seeScoreBtn && !gameOver && (\n          <button className=\"seeScore\" onClick={seeScoreFunc}>\n            See Score\n          </button>\n        )}\n        {backBtn && (\n          <button className=\"back\" onClick={reset}>\n            Back\n          </button>\n        )}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}